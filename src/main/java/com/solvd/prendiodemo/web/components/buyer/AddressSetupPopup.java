package com.solvd.prendiodemo.web.components.buyer;

import com.qaprosoft.carina.core.foundation.webdriver.decorator.ExtendedWebElement;
import com.solvd.prendiodemo.web.components.BasePopup;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.RandomUtils;
import org.openqa.selenium.SearchContext;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.testng.Assert;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AddressSetupPopup extends BasePopup {

    @FindBy(id = "seladdrtype")
    private ExtendedWebElement addressTypeSelect;

    @FindBy(id = "txtcity")
    private ExtendedWebElement cityField;

    @FindBy(id = "txtstate")
    private ExtendedWebElement stateField;

    @FindBy(xpath = "//input[contains(@id,'stxtstreet')]")
    private List<ExtendedWebElement> addressLines;

    @FindBy(id = "txtcode")
    private ExtendedWebElement zipCodeField;

    @FindBy(id = "dropdownCountry")
    private ExtendedWebElement countrySelect;

    @FindBy(id = "txtmainphone")
    private ExtendedWebElement phoneField;

    @FindBy(id = "txtaddresscode")
    private ExtendedWebElement addressCode;

    @FindBy(id = "isdefaultaddress")
    private ExtendedWebElement defaultAddressCheckbox;

    @FindBy(xpath = "//input[@id='isdefaultaddress']//parent::div")
    private ExtendedWebElement defaultAddressContainer;

    @FindBy(id = "SaveAddress")
    private ExtendedWebElement saveButton;

    @FindBy(xpath = "//input[@id='all_defaultShippingAddress']//parent::div")
    private ExtendedWebElement allDefaultChecker;

    @FindBy(xpath = "..//table//input[@type='checkbox']")
    private List<ExtendedWebElement> tableCheckboxes;

    @FindBy(id = "tbladdressuser")
    private ExtendedWebElement userTable;

    public AddressSetupPopup(WebDriver driver, SearchContext searchContext) {
        super(driver, searchContext);
    }

    public void clickSave() {
        saveButton.click();
    }

    private void waitAddressCodeAutoGenerated() {
        waitUntil(ExpectedConditions.attributeToBeNotEmpty(addressCode.getElement(), "value"),
                EXPLICIT_TIMEOUT);
    }

    public Map<String, String> fillInfoRandomly() {
        addressTypeSelect.selectByPartialText("Shipping");
        waitAddressCodeAutoGenerated();
        fillAddressLinesRandomly(addressLines);
        cityField.type(RandomStringUtils.randomAlphabetic(15));
        stateField.type(RandomStringUtils.randomAlphabetic(15));
        zipCodeField.type(RandomStringUtils.randomAlphabetic(10));
        selectByIndex(countrySelect, 1);
        phoneField.type(RandomStringUtils.randomNumeric(10));
        if (!getValue(addressCode).matches("[1-9]\\d{3}]")) {
            addressCode.type(String.valueOf(RandomUtils.nextInt(1, 10_000)));
        }
        defaultAddressContainer.click();
        return getInfo();
    }

    public Map<String, String> getInfo() {
        Map<String, String> info = new HashMap<>();
        info.put("addressType", getSelectedOptionText(addressTypeSelect));
        for (int i = 0; i < addressLines.size(); i++) {
            info.put("line" + (i + 1), getValue(addressLines.get(i)));
        }
        info.put("city", getValue(cityField));
        info.put("state", getValue(stateField));
        info.put("zip", getValue(zipCodeField));
        info.put("country", getSelectedOptionText(countrySelect));
        info.put("phone", getValue(phoneField));
        info.put("addressCode", getValue(addressCode));
        info.put("default", String.valueOf(defaultAddressCheckbox.isChecked()));
        return info;
    }

    public void clickUsers() {
        getPopupLeftMenu().clickUsers();
    }

    public void assertUserSectionVisible() {
        Assert.assertTrue(userTable.isVisible(), "User section is not visible");
    }

    public void checkAllDefault() {
        allDefaultChecker.click();
    }

    public void assertAllDefaultActive() {
        Assert.assertTrue(tableCheckboxes.stream()
                        .filter(checkbox -> checkbox.getElement().isDisplayed())
                        .allMatch(ExtendedWebElement::isChecked),
                "Not all checkboxes checked");
    }
}
